/*
 *      CONFIDENTIAL AND PROPRIETARY SOFTWARE/DATA OF ARTISAN COMPONENTS, INC.
 *      
 *      Copyright (c) 2013 Artisan Components, Inc.  All Rights Reserved.
 *      
 *      Use of this Software/Data is subject to the terms and conditions of
 *      the applicable license agreement between Artisan Components, Inc. and
 *      Taiwan Semiconductor Manufacturing Company Ltd..  In addition, this Software/Data
 *      is protected by copyright law and international treaties.
 *      
 *      The copyright notice(s) in this Software/Data does not indicate actual
 *      or intended publication of this Software/Data.
 *      name:			SRAM-SP-HS SRAM Generator
 *           			TSMC CL013G-FSG Process
 *      version:		2003Q4V1
 *      comment:		
 *      configuration:	 -instname "sram_256x8" -words 256 -bits 8 -frequency 100 -ring_width 2 -mux 8 -drive 6 -write_mask off -wp_size 8 -redundancy off -redundancy_bits 1 -top_layer met8 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -fuse_encoding encoded -insert_fuse yes -fusebox_name FUSE -rtl_style mux -libname "sram_256x8"
 *
 *      Synopsys model for Synchronous Single-Port Ram
 *
 *      Library Name:   sram_256x8
 *      Instance Name:  sram_256x8
 *      Words:          256
 *      Word Width:     8
 *      Mux:            8
 *      Pipeline:       No
 *      Process:        slow
 *      Delays:		max
 *
 *      Creation Date:  2013-03-29 08:26:06Z
 *      Version:        2003Q4V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(sram_256x8) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2013-03-29 08:26:06Z";
	comment			: "Confidential Information of Artisan Components, Inc.  Use subject to Artisan Components license. Copyright (c) 2013 Artisan Components, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 125.000;
	nom_voltage		: 1.080;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1;
        slew_lower_threshold_pct_fall : 10.0;
        slew_upper_threshold_pct_fall : 90.0;
        slew_lower_threshold_pct_rise : 10.0;
        slew_upper_threshold_pct_rise : 90.0;
        input_threshold_pct_fall      : 50.0;
        input_threshold_pct_rise      : 50.0;
        output_threshold_pct_fall     : 50.0;
        output_threshold_pct_rise     : 50.0;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.0;
	k_temp_cell_rise		: 0.0;
	k_temp_hold_fall                : 0.0;
	k_temp_hold_rise                : 0.0;
	k_temp_min_pulse_width_high     : 0.0;
	k_temp_min_pulse_width_low      : 0.0;
	k_temp_min_period               : 0.0;
	k_temp_rise_propagation         : 0.0;
	k_temp_fall_propagation         : 0.0;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.0;
	k_temp_recovery_rise            : 0.0;
	k_temp_setup_fall               : 0.0;
	k_temp_setup_rise               : 0.0;
	k_volt_cell_fall                : 0.0;
	k_volt_cell_rise                : 0.0;
	k_volt_hold_fall                : 0.0;
	k_volt_hold_rise                : 0.0;
	k_volt_min_pulse_width_high     : 0.0;
	k_volt_min_pulse_width_low      : 0.0;
	k_volt_min_period               : 0.0;
	k_volt_rise_propagation         : 0.0;
	k_volt_fall_propagation         : 0.0;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.0;
	k_volt_recovery_rise            : 0.0;
	k_volt_setup_fall               : 0.0;
	k_volt_setup_rise               : 0.0;


	operating_conditions(slow) {
		process	 : 1;
		temperature	 : 125.000;
		voltage	 : 1.080;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : slow;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
	output_voltage(GENERAL) {
		vol	 : 0.4;
		voh	 : VDD - 0.4;
		vomin	 : -0.5;
		vomax	 : VDD + 0.5;
	}
	input_voltage(CMOS) {
		vil	 : 0.3 * VDD;
		vih	 : 0.7 * VDD;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
	input_voltage(TTL) {
		vil	 : 0.8;
		vih	 : 2;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
        lu_table_template(sram_256x8_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram_256x8_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram_256x8_load_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram_256x8_passive_energy_template_1x2) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (sram_256x8_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
	type (sram_256x8_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(sram_256x8) {
	area		 : 20809.905;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 8;
		word_width : 8;
	}
	bus(Q)	 {
		bus_type : sram_256x8_DATA;
		direction : output;
		max_capacitance : 0.600;
                memory_read() {
			address : A;
		}
		timing() {
			related_pin :	"CLK" ;
			timing_type : rising_edge;
			timing_sense : non_unate;
			cell_rise(sram_256x8_delay_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.000, 0.020, 0.040, 0.080, 0.190, 0.370, 0.600");
			values ( \
			  "1.898, 1.919, 1.940, 1.983, 2.099, 2.290, 2.534", \
			  "1.908, 1.929, 1.950, 1.993, 2.109, 2.300, 2.544", \
			  "1.921, 1.942, 1.963, 2.005, 2.122, 2.312, 2.556", \
			  "1.946, 1.967, 1.988, 2.030, 2.147, 2.338, 2.581", \
			  "2.021, 2.042, 2.063, 2.106, 2.222, 2.413, 2.656", \
			  "2.146, 2.167, 2.189, 2.231, 2.348, 2.538, 2.782", \
			  "2.272, 2.293, 2.314, 2.356, 2.473, 2.664, 2.907" \
			)
			}
			rise_transition(sram_256x8_load_template) {
			index_1 ("0.000, 0.020, 0.040, 0.080, 0.190, 0.370, 0.600");
			values ("0.071, 0.114, 0.158, 0.245, 0.484, 0.876, 1.376")
			}
			cell_fall(sram_256x8_delay_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.000, 0.020, 0.040, 0.080, 0.190, 0.370, 0.600");
			values ( \
			  "1.999, 2.015, 2.031, 2.063, 2.150, 2.292, 2.475", \
			  "2.009, 2.025, 2.041, 2.073, 2.160, 2.302, 2.485", \
			  "2.022, 2.038, 2.053, 2.085, 2.172, 2.315, 2.497", \
			  "2.047, 2.063, 2.079, 2.110, 2.197, 2.340, 2.522", \
			  "2.122, 2.138, 2.154, 2.186, 2.273, 2.415, 2.598", \
			  "2.248, 2.263, 2.279, 2.311, 2.398, 2.541, 2.723", \
			  "2.373, 2.389, 2.405, 2.436, 2.524, 2.666, 2.849" \
			)
			}
			fall_transition(sram_256x8_load_template) {
			index_1 ("0.000, 0.020, 0.040, 0.080, 0.190, 0.370, 0.600");
			values ("0.080, 0.107, 0.133, 0.186, 0.332, 0.571, 0.876")
		}	}
        }

	pin(CLK) {
		direction : input;
		capacitance : 0.151
		clock	: true;
		min_pulse_width_low	: 0.289;
		min_pulse_width_high	: 0.097;
		min_period		: 2.131;
		max_transition		: 1.500;
		internal_power(){
			when : "!CEN & WEN";
        		rise_power(sram_256x8_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
            			values ("12.677, 12.677")
        		}
        		fall_power(sram_256x8_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
            			values ("0.0, 0.0")
        		}
		}
		internal_power(){
			when : "!CEN & !WEN";
			rise_power(sram_256x8_passive_energy_template_1x2) {
	    			index_1 ("0.0 1.0");
	    			values ("14.610, 14.610")
			}	
			fall_power(sram_256x8_passive_energy_template_1x2) {
	    			index_1 ("0.0 1.0");
            			values ("0.0, 0.0")
			}	
		}
         internal_power(){
                 when : "CEN";
                 power(sram_256x8_passive_energy_template_1x2) {
                         index_1 ("0.0 1.0");
                         values ("0.027, 0.027")
                 }
         }
	}

	pin(CEN) {
		direction : input;
		capacitance : 0.006;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.676, 0.680, 0.685, 0.695, 0.726, 0.778, 0.830", \
			  "0.666, 0.670, 0.675, 0.685, 0.716, 0.768, 0.819", \
			  "0.653, 0.657, 0.663, 0.673, 0.704, 0.755, 0.807", \
			  "0.628, 0.632, 0.638, 0.648, 0.679, 0.730, 0.782", \
			  "0.553, 0.557, 0.562, 0.573, 0.604, 0.655, 0.707", \
			  "0.428, 0.432, 0.437, 0.447, 0.478, 0.530, 0.581", \
			  "0.302, 0.306, 0.311, 0.322, 0.353, 0.404, 0.456" \
			)
			}
			fall_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.475, 0.483, 0.493, 0.513, 0.573, 0.673, 0.773", \
			  "0.465, 0.473, 0.483, 0.503, 0.563, 0.663, 0.763", \
			  "0.452, 0.460, 0.470, 0.490, 0.550, 0.650, 0.750", \
			  "0.427, 0.435, 0.445, 0.465, 0.525, 0.625, 0.725", \
			  "0.352, 0.360, 0.370, 0.390, 0.450, 0.550, 0.650", \
			  "0.226, 0.234, 0.244, 0.264, 0.324, 0.424, 0.524", \
			  "0.101, 0.109, 0.119, 0.139, 0.199, 0.299, 0.399" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.003, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.128, 0.124, 0.119, 0.108, 0.078, 0.026, 0.000", \
			  "0.253, 0.249, 0.244, 0.234, 0.203, 0.151, 0.100" \
			)
				
			}
			fall_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.092, 0.084, 0.074, 0.054, 0.000, 0.000, 0.000" \
			)
	}	}	}

	pin(WEN) {
		direction : input;
		capacitance : 0.007;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.495, 0.501, 0.508, 0.523, 0.568, 0.642, 0.717", \
			  "0.485, 0.491, 0.498, 0.513, 0.558, 0.632, 0.707", \
			  "0.472, 0.478, 0.486, 0.500, 0.545, 0.620, 0.694", \
			  "0.447, 0.453, 0.460, 0.475, 0.520, 0.595, 0.669", \
			  "0.372, 0.378, 0.385, 0.400, 0.445, 0.519, 0.594", \
			  "0.246, 0.252, 0.260, 0.275, 0.319, 0.394, 0.468", \
			  "0.121, 0.127, 0.134, 0.149, 0.194, 0.268, 0.343" \
			)
			}
			fall_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.618, 0.627, 0.638, 0.661, 0.728, 0.840, 0.953", \
			  "0.608, 0.617, 0.628, 0.651, 0.718, 0.830, 0.942", \
			  "0.596, 0.605, 0.616, 0.638, 0.706, 0.818, 0.930", \
			  "0.570, 0.579, 0.591, 0.613, 0.680, 0.793, 0.905", \
			  "0.495, 0.504, 0.515, 0.538, 0.605, 0.717, 0.830", \
			  "0.370, 0.379, 0.390, 0.412, 0.480, 0.592, 0.704", \
			  "0.244, 0.253, 0.265, 0.287, 0.354, 0.467, 0.579" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000" \
			)
			}
			fall_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000" \
			)
	}	}	}

	bus(A)  {
		bus_type : sram_256x8_ADDRESS;
		direction : input;
		capacitance : 0.017;
		timing() {
			related_pin	: "CLK"
			timing_type	: setup_rising ;
			rise_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.550, 0.552, 0.556, 0.562, 0.582, 0.614, 0.647", \
			  "0.540, 0.542, 0.546, 0.552, 0.572, 0.604, 0.637", \
			  "0.527, 0.530, 0.533, 0.540, 0.559, 0.592, 0.625", \
			  "0.502, 0.505, 0.508, 0.514, 0.534, 0.567, 0.599", \
			  "0.427, 0.429, 0.433, 0.439, 0.459, 0.492, 0.524", \
			  "0.301, 0.304, 0.307, 0.314, 0.333, 0.366, 0.399", \
			  "0.176, 0.179, 0.182, 0.188, 0.208, 0.241, 0.273" \
			)
			}
			fall_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.347, 0.352, 0.359, 0.372, 0.411, 0.476, 0.542", \
			  "0.337, 0.342, 0.349, 0.362, 0.401, 0.466, 0.532", \
			  "0.324, 0.329, 0.336, 0.349, 0.388, 0.454, 0.519", \
			  "0.299, 0.304, 0.311, 0.324, 0.363, 0.429, 0.494", \
			  "0.224, 0.229, 0.236, 0.249, 0.288, 0.354, 0.419", \
			  "0.098, 0.104, 0.110, 0.123, 0.163, 0.228, 0.294", \
			  "-0.027, -0.022, -0.015, -0.002, 0.037, 0.103, 0.168" \
			)
		}	}
		timing() {
			related_pin	: "CLK"
			timing_type	: hold_rising ;
			rise_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.047, 0.045, 0.042, 0.035, 0.015, 0.000, 0.000", \
			  "0.173, 0.170, 0.167, 0.160, 0.141, 0.108, 0.075", \
			  "0.298, 0.296, 0.292, 0.286, 0.266, 0.234, 0.201" \
			)
			}
			fall_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.050, 0.044, 0.038, 0.025, 0.000, 0.000, 0.000", \
			  "0.175, 0.170, 0.163, 0.150, 0.111, 0.045, 0.000", \
			  "0.301, 0.295, 0.289, 0.276, 0.236, 0.171, 0.105" \
			)
	}	}	

         internal_power(){
                 when : "CEN";
                 power(sram_256x8_passive_energy_template_1x2) {
                         index_1 ("0.0 1.0");
                         values ("0.241, 0.241")
                 }
         }

}
	bus(D)	 {
		bus_type : sram_256x8_DATA;
		direction : input;
		capacitance : 0.001;
		memory_write() {
			address : A;
			clocked_on : "CLK";
		}
		timing() {
			related_pin	: "CLK"
			timing_type	: setup_rising ;
			rise_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.405, 0.407, 0.408, 0.411, 0.420, 0.435, 0.450", \
			  "0.395, 0.397, 0.398, 0.401, 0.410, 0.425, 0.440", \
			  "0.383, 0.384, 0.385, 0.389, 0.398, 0.413, 0.428", \
			  "0.358, 0.359, 0.360, 0.363, 0.372, 0.388, 0.403", \
			  "0.282, 0.284, 0.285, 0.288, 0.297, 0.312, 0.327", \
			  "0.157, 0.158, 0.160, 0.163, 0.172, 0.187, 0.202", \
			  "0.032, 0.033, 0.034, 0.037, 0.046, 0.062, 0.077" \
			)
			}
			fall_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.290, 0.300, 0.313, 0.339, 0.418, 0.548, 0.678", \
			  "0.280, 0.290, 0.303, 0.329, 0.408, 0.538, 0.668", \
			  "0.267, 0.278, 0.291, 0.317, 0.395, 0.525, 0.656", \
			  "0.242, 0.253, 0.266, 0.292, 0.370, 0.500, 0.630", \
			  "0.167, 0.177, 0.190, 0.216, 0.295, 0.425, 0.555", \
			  "0.042, 0.052, 0.065, 0.091, 0.169, 0.299, 0.430", \
			  "-0.084, -0.074, -0.060, -0.034, 0.044, 0.174, 0.304" \
			)
		}	}
		timing() {
			related_pin	: "CLK"
			timing_type	: hold_rising ;
			rise_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.058, 0.057, 0.056, 0.053, 0.043, 0.028, 0.013" \
			)
			}
			fall_constraint(sram_256x8_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.124, 0.114, 0.101, 0.075, 0.000, 0.000, 0.000", \
			  "0.250, 0.239, 0.226, 0.200, 0.122, 0.000, 0.000" \
			)
		}	}
	}

	cell_leakage_power : 0.011;
  }
}
